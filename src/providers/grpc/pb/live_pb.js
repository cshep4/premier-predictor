/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var request_pb = require('./request_pb.js');
var prediction_pb = require('./prediction_pb.js');
goog.exportSymbol('proto.model.Comment', null, global);
goog.exportSymbol('proto.model.Commentary', null, global);
goog.exportSymbol('proto.model.Event', null, global);
goog.exportSymbol('proto.model.Lineup', null, global);
goog.exportSymbol('proto.model.MatchFacts', null, global);
goog.exportSymbol('proto.model.MatchFactsList', null, global);
goog.exportSymbol('proto.model.MatchInfo', null, global);
goog.exportSymbol('proto.model.MatchStats', null, global);
goog.exportSymbol('proto.model.MatchSummary', null, global);
goog.exportSymbol('proto.model.Player', null, global);
goog.exportSymbol('proto.model.PlayerStats', null, global);
goog.exportSymbol('proto.model.Players', null, global);
goog.exportSymbol('proto.model.Position', null, global);
goog.exportSymbol('proto.model.Substitution', null, global);
goog.exportSymbol('proto.model.Substitutions', null, global);
goog.exportSymbol('proto.model.TeamStats', null, global);
goog.exportSymbol('proto.model.UpcomingMatchesResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.UpcomingMatchesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.UpcomingMatchesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.UpcomingMatchesResponse.displayName = 'proto.model.UpcomingMatchesResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.UpcomingMatchesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.UpcomingMatchesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.UpcomingMatchesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.UpcomingMatchesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchesMap: (f = msg.getMatchesMap()) ? f.toObject(includeInstance, proto.model.MatchFactsList.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.UpcomingMatchesResponse}
 */
proto.model.UpcomingMatchesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.UpcomingMatchesResponse;
  return proto.model.UpcomingMatchesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.UpcomingMatchesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.UpcomingMatchesResponse}
 */
proto.model.UpcomingMatchesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMatchesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.model.MatchFactsList.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.UpcomingMatchesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.UpcomingMatchesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.UpcomingMatchesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.UpcomingMatchesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.model.MatchFactsList.serializeBinaryToWriter);
  }
};


/**
 * map<string, MatchFactsList> matches = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.model.MatchFactsList>}
 */
proto.model.UpcomingMatchesResponse.prototype.getMatchesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.model.MatchFactsList>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.model.MatchFactsList));
};


proto.model.UpcomingMatchesResponse.prototype.clearMatchesMap = function() {
  this.getMatchesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.MatchSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.MatchSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.MatchSummary.displayName = 'proto.model.MatchSummary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.MatchSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.model.MatchSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.MatchSummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MatchSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    match: (f = msg.getMatch()) && proto.model.MatchFacts.toObject(includeInstance, f),
    predictionsummary: (f = msg.getPredictionsummary()) && prediction_pb.MatchPredictionSummary.toObject(includeInstance, f),
    prediction: (f = msg.getPrediction()) && prediction_pb.Prediction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.MatchSummary}
 */
proto.model.MatchSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.MatchSummary;
  return proto.model.MatchSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.MatchSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.MatchSummary}
 */
proto.model.MatchSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.MatchFacts;
      reader.readMessage(value,proto.model.MatchFacts.deserializeBinaryFromReader);
      msg.setMatch(value);
      break;
    case 2:
      var value = new prediction_pb.MatchPredictionSummary;
      reader.readMessage(value,prediction_pb.MatchPredictionSummary.deserializeBinaryFromReader);
      msg.setPredictionsummary(value);
      break;
    case 3:
      var value = new prediction_pb.Prediction;
      reader.readMessage(value,prediction_pb.Prediction.deserializeBinaryFromReader);
      msg.setPrediction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.MatchSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.MatchSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.MatchSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MatchSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatch();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.MatchFacts.serializeBinaryToWriter
    );
  }
  f = message.getPredictionsummary();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      prediction_pb.MatchPredictionSummary.serializeBinaryToWriter
    );
  }
  f = message.getPrediction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      prediction_pb.Prediction.serializeBinaryToWriter
    );
  }
};


/**
 * optional MatchFacts match = 1;
 * @return {?proto.model.MatchFacts}
 */
proto.model.MatchSummary.prototype.getMatch = function() {
  return /** @type{?proto.model.MatchFacts} */ (
    jspb.Message.getWrapperField(this, proto.model.MatchFacts, 1));
};


/** @param {?proto.model.MatchFacts|undefined} value */
proto.model.MatchSummary.prototype.setMatch = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.MatchSummary.prototype.clearMatch = function() {
  this.setMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.MatchSummary.prototype.hasMatch = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MatchPredictionSummary predictionSummary = 2;
 * @return {?proto.model.MatchPredictionSummary}
 */
proto.model.MatchSummary.prototype.getPredictionsummary = function() {
  return /** @type{?proto.model.MatchPredictionSummary} */ (
    jspb.Message.getWrapperField(this, prediction_pb.MatchPredictionSummary, 2));
};


/** @param {?proto.model.MatchPredictionSummary|undefined} value */
proto.model.MatchSummary.prototype.setPredictionsummary = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.model.MatchSummary.prototype.clearPredictionsummary = function() {
  this.setPredictionsummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.MatchSummary.prototype.hasPredictionsummary = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Prediction prediction = 3;
 * @return {?proto.model.Prediction}
 */
proto.model.MatchSummary.prototype.getPrediction = function() {
  return /** @type{?proto.model.Prediction} */ (
    jspb.Message.getWrapperField(this, prediction_pb.Prediction, 3));
};


/** @param {?proto.model.Prediction|undefined} value */
proto.model.MatchSummary.prototype.setPrediction = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.model.MatchSummary.prototype.clearPrediction = function() {
  this.setPrediction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.MatchSummary.prototype.hasPrediction = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.MatchFactsList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.MatchFactsList.repeatedFields_, null);
};
goog.inherits(proto.model.MatchFactsList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.MatchFactsList.displayName = 'proto.model.MatchFactsList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.MatchFactsList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.MatchFactsList.prototype.toObject = function(opt_includeInstance) {
  return proto.model.MatchFactsList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.MatchFactsList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MatchFactsList.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchesList: jspb.Message.toObjectList(msg.getMatchesList(),
    proto.model.MatchFacts.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.MatchFactsList}
 */
proto.model.MatchFactsList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.MatchFactsList;
  return proto.model.MatchFactsList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.MatchFactsList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.MatchFactsList}
 */
proto.model.MatchFactsList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.MatchFacts;
      reader.readMessage(value,proto.model.MatchFacts.deserializeBinaryFromReader);
      msg.addMatches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.MatchFactsList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.MatchFactsList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.MatchFactsList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MatchFactsList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.MatchFacts.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MatchFacts matches = 1;
 * @return {!Array<!proto.model.MatchFacts>}
 */
proto.model.MatchFactsList.prototype.getMatchesList = function() {
  return /** @type{!Array<!proto.model.MatchFacts>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.MatchFacts, 1));
};


/** @param {!Array<!proto.model.MatchFacts>} value */
proto.model.MatchFactsList.prototype.setMatchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.MatchFacts=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.MatchFacts}
 */
proto.model.MatchFactsList.prototype.addMatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.MatchFacts, opt_index);
};


proto.model.MatchFactsList.prototype.clearMatchesList = function() {
  this.setMatchesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.MatchFacts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.MatchFacts.repeatedFields_, null);
};
goog.inherits(proto.model.MatchFacts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.MatchFacts.displayName = 'proto.model.MatchFacts';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.MatchFacts.repeatedFields_ = [23];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.MatchFacts.prototype.toObject = function(opt_includeInstance) {
  return proto.model.MatchFacts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.MatchFacts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MatchFacts.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    compid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    formatteddate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    season: jspb.Message.getFieldWithDefault(msg, 4, ""),
    week: jspb.Message.getFieldWithDefault(msg, 5, ""),
    venue: jspb.Message.getFieldWithDefault(msg, 6, ""),
    venueid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    venuecity: jspb.Message.getFieldWithDefault(msg, 8, ""),
    status: jspb.Message.getFieldWithDefault(msg, 9, ""),
    timer: jspb.Message.getFieldWithDefault(msg, 10, ""),
    time: jspb.Message.getFieldWithDefault(msg, 11, ""),
    localteamid: jspb.Message.getFieldWithDefault(msg, 12, ""),
    localteamname: jspb.Message.getFieldWithDefault(msg, 13, ""),
    localteamscore: jspb.Message.getFieldWithDefault(msg, 14, ""),
    visitorteamid: jspb.Message.getFieldWithDefault(msg, 15, ""),
    visitorteamname: jspb.Message.getFieldWithDefault(msg, 16, ""),
    visitorteamscore: jspb.Message.getFieldWithDefault(msg, 17, ""),
    htscore: jspb.Message.getFieldWithDefault(msg, 18, ""),
    ftscore: jspb.Message.getFieldWithDefault(msg, 19, ""),
    etscore: jspb.Message.getFieldWithDefault(msg, 20, ""),
    penaltylocal: jspb.Message.getFieldWithDefault(msg, 21, ""),
    penaltyvisitor: jspb.Message.getFieldWithDefault(msg, 22, ""),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.model.Event.toObject, includeInstance),
    commentary: (f = msg.getCommentary()) && proto.model.Commentary.toObject(includeInstance, f),
    matchdate: (f = msg.getMatchdate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.MatchFacts}
 */
proto.model.MatchFacts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.MatchFacts;
  return proto.model.MatchFacts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.MatchFacts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.MatchFacts}
 */
proto.model.MatchFacts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormatteddate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeason(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeek(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVenue(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVenueid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setVenuecity(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimer(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalteamid(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalteamname(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalteamscore(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setVisitorteamid(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setVisitorteamname(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setVisitorteamscore(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtscore(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setFtscore(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setEtscore(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setPenaltylocal(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setPenaltyvisitor(value);
      break;
    case 23:
      var value = new proto.model.Event;
      reader.readMessage(value,proto.model.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 24:
      var value = new proto.model.Commentary;
      reader.readMessage(value,proto.model.Commentary.deserializeBinaryFromReader);
      msg.setCommentary(value);
      break;
    case 25:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setMatchdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.MatchFacts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.MatchFacts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.MatchFacts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MatchFacts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCompid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFormatteddate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSeason();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWeek();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getVenue();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getVenueid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getVenuecity();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTimer();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getLocalteamid();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getLocalteamname();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getLocalteamscore();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getVisitorteamid();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getVisitorteamname();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getVisitorteamscore();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getHtscore();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getFtscore();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getEtscore();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getPenaltylocal();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getPenaltyvisitor();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      23,
      f,
      proto.model.Event.serializeBinaryToWriter
    );
  }
  f = message.getCommentary();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.model.Commentary.serializeBinaryToWriter
    );
  }
  f = message.getMatchdate();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string compId = 2;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getCompid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setCompid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string formattedDate = 3;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getFormatteddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setFormatteddate = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string season = 4;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getSeason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setSeason = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string week = 5;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getWeek = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setWeek = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string venue = 6;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getVenue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setVenue = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string venueId = 7;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getVenueid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setVenueid = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string venueCity = 8;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getVenuecity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setVenuecity = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string status = 9;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string timer = 10;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getTimer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setTimer = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string time = 11;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setTime = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string localTeamId = 12;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getLocalteamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setLocalteamid = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string localTeamName = 13;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getLocalteamname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setLocalteamname = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string localTeamScore = 14;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getLocalteamscore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setLocalteamscore = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string visitorTeamId = 15;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getVisitorteamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setVisitorteamid = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string visitorTeamName = 16;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getVisitorteamname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setVisitorteamname = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string visitorTeamScore = 17;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getVisitorteamscore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setVisitorteamscore = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string htScore = 18;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getHtscore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setHtscore = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string ftScore = 19;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getFtscore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setFtscore = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string etScore = 20;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getEtscore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setEtscore = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string penaltyLocal = 21;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getPenaltylocal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setPenaltylocal = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string penaltyVisitor = 22;
 * @return {string}
 */
proto.model.MatchFacts.prototype.getPenaltyvisitor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.model.MatchFacts.prototype.setPenaltyvisitor = function(value) {
  jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * repeated Event events = 23;
 * @return {!Array<!proto.model.Event>}
 */
proto.model.MatchFacts.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.model.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.Event, 23));
};


/** @param {!Array<!proto.model.Event>} value */
proto.model.MatchFacts.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 23, value);
};


/**
 * @param {!proto.model.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Event}
 */
proto.model.MatchFacts.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 23, opt_value, proto.model.Event, opt_index);
};


proto.model.MatchFacts.prototype.clearEventsList = function() {
  this.setEventsList([]);
};


/**
 * optional Commentary commentary = 24;
 * @return {?proto.model.Commentary}
 */
proto.model.MatchFacts.prototype.getCommentary = function() {
  return /** @type{?proto.model.Commentary} */ (
    jspb.Message.getWrapperField(this, proto.model.Commentary, 24));
};


/** @param {?proto.model.Commentary|undefined} value */
proto.model.MatchFacts.prototype.setCommentary = function(value) {
  jspb.Message.setWrapperField(this, 24, value);
};


proto.model.MatchFacts.prototype.clearCommentary = function() {
  this.setCommentary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.MatchFacts.prototype.hasCommentary = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional google.protobuf.Timestamp matchDate = 25;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.model.MatchFacts.prototype.getMatchdate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 25));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.model.MatchFacts.prototype.setMatchdate = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.model.MatchFacts.prototype.clearMatchdate = function() {
  this.setMatchdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.MatchFacts.prototype.hasMatchdate = function() {
  return jspb.Message.getField(this, 25) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.Event.displayName = 'proto.model.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    result: jspb.Message.getFieldWithDefault(msg, 3, ""),
    minute: jspb.Message.getFieldWithDefault(msg, 4, ""),
    extramin: jspb.Message.getFieldWithDefault(msg, 5, ""),
    team: jspb.Message.getFieldWithDefault(msg, 6, ""),
    player: jspb.Message.getFieldWithDefault(msg, 7, ""),
    playerid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    assist: jspb.Message.getFieldWithDefault(msg, 9, ""),
    assistid: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Event}
 */
proto.model.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Event;
  return proto.model.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Event}
 */
proto.model.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinute(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtramin(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeam(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssist(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssistid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMinute();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getExtramin();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTeam();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPlayer();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAssist();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAssistid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.model.Event.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.Event.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.model.Event.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.Event.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string result = 3;
 * @return {string}
 */
proto.model.Event.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.Event.prototype.setResult = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string minute = 4;
 * @return {string}
 */
proto.model.Event.prototype.getMinute = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.Event.prototype.setMinute = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string extraMin = 5;
 * @return {string}
 */
proto.model.Event.prototype.getExtramin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.model.Event.prototype.setExtramin = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string team = 6;
 * @return {string}
 */
proto.model.Event.prototype.getTeam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.model.Event.prototype.setTeam = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string player = 7;
 * @return {string}
 */
proto.model.Event.prototype.getPlayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.model.Event.prototype.setPlayer = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string playerId = 8;
 * @return {string}
 */
proto.model.Event.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.model.Event.prototype.setPlayerid = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string assist = 9;
 * @return {string}
 */
proto.model.Event.prototype.getAssist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.model.Event.prototype.setAssist = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string assistId = 10;
 * @return {string}
 */
proto.model.Event.prototype.getAssistid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.model.Event.prototype.setAssistid = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Commentary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.Commentary.repeatedFields_, null);
};
goog.inherits(proto.model.Commentary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.Commentary.displayName = 'proto.model.Commentary';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.Commentary.repeatedFields_ = [2,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Commentary.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Commentary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Commentary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Commentary.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    matchinfoList: jspb.Message.toObjectList(msg.getMatchinfoList(),
    proto.model.MatchInfo.toObject, includeInstance),
    lineup: (f = msg.getLineup()) && proto.model.Lineup.toObject(includeInstance, f),
    subs: (f = msg.getSubs()) && proto.model.Lineup.toObject(includeInstance, f),
    substitutions: (f = msg.getSubstitutions()) && proto.model.Substitutions.toObject(includeInstance, f),
    commentsList: jspb.Message.toObjectList(msg.getCommentsList(),
    proto.model.Comment.toObject, includeInstance),
    matchstats: (f = msg.getMatchstats()) && proto.model.MatchStats.toObject(includeInstance, f),
    playerstats: (f = msg.getPlayerstats()) && proto.model.PlayerStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Commentary}
 */
proto.model.Commentary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Commentary;
  return proto.model.Commentary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Commentary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Commentary}
 */
proto.model.Commentary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchid(value);
      break;
    case 2:
      var value = new proto.model.MatchInfo;
      reader.readMessage(value,proto.model.MatchInfo.deserializeBinaryFromReader);
      msg.addMatchinfo(value);
      break;
    case 3:
      var value = new proto.model.Lineup;
      reader.readMessage(value,proto.model.Lineup.deserializeBinaryFromReader);
      msg.setLineup(value);
      break;
    case 4:
      var value = new proto.model.Lineup;
      reader.readMessage(value,proto.model.Lineup.deserializeBinaryFromReader);
      msg.setSubs(value);
      break;
    case 5:
      var value = new proto.model.Substitutions;
      reader.readMessage(value,proto.model.Substitutions.deserializeBinaryFromReader);
      msg.setSubstitutions(value);
      break;
    case 6:
      var value = new proto.model.Comment;
      reader.readMessage(value,proto.model.Comment.deserializeBinaryFromReader);
      msg.addComments(value);
      break;
    case 7:
      var value = new proto.model.MatchStats;
      reader.readMessage(value,proto.model.MatchStats.deserializeBinaryFromReader);
      msg.setMatchstats(value);
      break;
    case 8:
      var value = new proto.model.PlayerStats;
      reader.readMessage(value,proto.model.PlayerStats.deserializeBinaryFromReader);
      msg.setPlayerstats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Commentary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Commentary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Commentary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Commentary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMatchinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.model.MatchInfo.serializeBinaryToWriter
    );
  }
  f = message.getLineup();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.model.Lineup.serializeBinaryToWriter
    );
  }
  f = message.getSubs();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.model.Lineup.serializeBinaryToWriter
    );
  }
  f = message.getSubstitutions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.model.Substitutions.serializeBinaryToWriter
    );
  }
  f = message.getCommentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.model.Comment.serializeBinaryToWriter
    );
  }
  f = message.getMatchstats();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.model.MatchStats.serializeBinaryToWriter
    );
  }
  f = message.getPlayerstats();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.model.PlayerStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional string matchId = 1;
 * @return {string}
 */
proto.model.Commentary.prototype.getMatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.Commentary.prototype.setMatchid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated MatchInfo matchInfo = 2;
 * @return {!Array<!proto.model.MatchInfo>}
 */
proto.model.Commentary.prototype.getMatchinfoList = function() {
  return /** @type{!Array<!proto.model.MatchInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.MatchInfo, 2));
};


/** @param {!Array<!proto.model.MatchInfo>} value */
proto.model.Commentary.prototype.setMatchinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.model.MatchInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.MatchInfo}
 */
proto.model.Commentary.prototype.addMatchinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.model.MatchInfo, opt_index);
};


proto.model.Commentary.prototype.clearMatchinfoList = function() {
  this.setMatchinfoList([]);
};


/**
 * optional Lineup lineup = 3;
 * @return {?proto.model.Lineup}
 */
proto.model.Commentary.prototype.getLineup = function() {
  return /** @type{?proto.model.Lineup} */ (
    jspb.Message.getWrapperField(this, proto.model.Lineup, 3));
};


/** @param {?proto.model.Lineup|undefined} value */
proto.model.Commentary.prototype.setLineup = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.model.Commentary.prototype.clearLineup = function() {
  this.setLineup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.Commentary.prototype.hasLineup = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Lineup subs = 4;
 * @return {?proto.model.Lineup}
 */
proto.model.Commentary.prototype.getSubs = function() {
  return /** @type{?proto.model.Lineup} */ (
    jspb.Message.getWrapperField(this, proto.model.Lineup, 4));
};


/** @param {?proto.model.Lineup|undefined} value */
proto.model.Commentary.prototype.setSubs = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.model.Commentary.prototype.clearSubs = function() {
  this.setSubs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.Commentary.prototype.hasSubs = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Substitutions substitutions = 5;
 * @return {?proto.model.Substitutions}
 */
proto.model.Commentary.prototype.getSubstitutions = function() {
  return /** @type{?proto.model.Substitutions} */ (
    jspb.Message.getWrapperField(this, proto.model.Substitutions, 5));
};


/** @param {?proto.model.Substitutions|undefined} value */
proto.model.Commentary.prototype.setSubstitutions = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.model.Commentary.prototype.clearSubstitutions = function() {
  this.setSubstitutions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.Commentary.prototype.hasSubstitutions = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Comment comments = 6;
 * @return {!Array<!proto.model.Comment>}
 */
proto.model.Commentary.prototype.getCommentsList = function() {
  return /** @type{!Array<!proto.model.Comment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.Comment, 6));
};


/** @param {!Array<!proto.model.Comment>} value */
proto.model.Commentary.prototype.setCommentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.model.Comment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Comment}
 */
proto.model.Commentary.prototype.addComments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.model.Comment, opt_index);
};


proto.model.Commentary.prototype.clearCommentsList = function() {
  this.setCommentsList([]);
};


/**
 * optional MatchStats matchStats = 7;
 * @return {?proto.model.MatchStats}
 */
proto.model.Commentary.prototype.getMatchstats = function() {
  return /** @type{?proto.model.MatchStats} */ (
    jspb.Message.getWrapperField(this, proto.model.MatchStats, 7));
};


/** @param {?proto.model.MatchStats|undefined} value */
proto.model.Commentary.prototype.setMatchstats = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.model.Commentary.prototype.clearMatchstats = function() {
  this.setMatchstats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.Commentary.prototype.hasMatchstats = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PlayerStats playerStats = 8;
 * @return {?proto.model.PlayerStats}
 */
proto.model.Commentary.prototype.getPlayerstats = function() {
  return /** @type{?proto.model.PlayerStats} */ (
    jspb.Message.getWrapperField(this, proto.model.PlayerStats, 8));
};


/** @param {?proto.model.PlayerStats|undefined} value */
proto.model.Commentary.prototype.setPlayerstats = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.model.Commentary.prototype.clearPlayerstats = function() {
  this.setPlayerstats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.Commentary.prototype.hasPlayerstats = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.MatchInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.MatchInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.MatchInfo.displayName = 'proto.model.MatchInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.MatchInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.model.MatchInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.MatchInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MatchInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    stadium: jspb.Message.getFieldWithDefault(msg, 1, ""),
    attendance: jspb.Message.getFieldWithDefault(msg, 2, ""),
    referee: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.MatchInfo}
 */
proto.model.MatchInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.MatchInfo;
  return proto.model.MatchInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.MatchInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.MatchInfo}
 */
proto.model.MatchInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStadium(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttendance(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.MatchInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.MatchInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.MatchInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MatchInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStadium();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAttendance();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReferee();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string stadium = 1;
 * @return {string}
 */
proto.model.MatchInfo.prototype.getStadium = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.MatchInfo.prototype.setStadium = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string attendance = 2;
 * @return {string}
 */
proto.model.MatchInfo.prototype.getAttendance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.MatchInfo.prototype.setAttendance = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string referee = 3;
 * @return {string}
 */
proto.model.MatchInfo.prototype.getReferee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.MatchInfo.prototype.setReferee = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Lineup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.Lineup.repeatedFields_, null);
};
goog.inherits(proto.model.Lineup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.Lineup.displayName = 'proto.model.Lineup';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.Lineup.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Lineup.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Lineup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Lineup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Lineup.toObject = function(includeInstance, msg) {
  var f, obj = {
    localteamList: jspb.Message.toObjectList(msg.getLocalteamList(),
    proto.model.Position.toObject, includeInstance),
    visitorteamList: jspb.Message.toObjectList(msg.getVisitorteamList(),
    proto.model.Position.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Lineup}
 */
proto.model.Lineup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Lineup;
  return proto.model.Lineup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Lineup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Lineup}
 */
proto.model.Lineup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.Position;
      reader.readMessage(value,proto.model.Position.deserializeBinaryFromReader);
      msg.addLocalteam(value);
      break;
    case 3:
      var value = new proto.model.Position;
      reader.readMessage(value,proto.model.Position.deserializeBinaryFromReader);
      msg.addVisitorteam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Lineup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Lineup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Lineup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Lineup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalteamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.Position.serializeBinaryToWriter
    );
  }
  f = message.getVisitorteamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.model.Position.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Position localTeam = 1;
 * @return {!Array<!proto.model.Position>}
 */
proto.model.Lineup.prototype.getLocalteamList = function() {
  return /** @type{!Array<!proto.model.Position>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.Position, 1));
};


/** @param {!Array<!proto.model.Position>} value */
proto.model.Lineup.prototype.setLocalteamList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.Position=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Position}
 */
proto.model.Lineup.prototype.addLocalteam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.Position, opt_index);
};


proto.model.Lineup.prototype.clearLocalteamList = function() {
  this.setLocalteamList([]);
};


/**
 * repeated Position visitorTeam = 3;
 * @return {!Array<!proto.model.Position>}
 */
proto.model.Lineup.prototype.getVisitorteamList = function() {
  return /** @type{!Array<!proto.model.Position>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.Position, 3));
};


/** @param {!Array<!proto.model.Position>} value */
proto.model.Lineup.prototype.setVisitorteamList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.model.Position=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Position}
 */
proto.model.Lineup.prototype.addVisitorteam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.model.Position, opt_index);
};


proto.model.Lineup.prototype.clearVisitorteamList = function() {
  this.setVisitorteamList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.Position.displayName = 'proto.model.Position';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    number: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pos: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Position}
 */
proto.model.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Position;
  return proto.model.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Position}
 */
proto.model.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPos();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.model.Position.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.Position.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string number = 2;
 * @return {string}
 */
proto.model.Position.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.Position.prototype.setNumber = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.model.Position.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.Position.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string pos = 4;
 * @return {string}
 */
proto.model.Position.prototype.getPos = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.Position.prototype.setPos = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Substitutions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.Substitutions.repeatedFields_, null);
};
goog.inherits(proto.model.Substitutions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.Substitutions.displayName = 'proto.model.Substitutions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.Substitutions.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Substitutions.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Substitutions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Substitutions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Substitutions.toObject = function(includeInstance, msg) {
  var f, obj = {
    localteamList: jspb.Message.toObjectList(msg.getLocalteamList(),
    proto.model.Substitution.toObject, includeInstance),
    visitorteamList: jspb.Message.toObjectList(msg.getVisitorteamList(),
    proto.model.Substitution.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Substitutions}
 */
proto.model.Substitutions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Substitutions;
  return proto.model.Substitutions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Substitutions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Substitutions}
 */
proto.model.Substitutions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.Substitution;
      reader.readMessage(value,proto.model.Substitution.deserializeBinaryFromReader);
      msg.addLocalteam(value);
      break;
    case 2:
      var value = new proto.model.Substitution;
      reader.readMessage(value,proto.model.Substitution.deserializeBinaryFromReader);
      msg.addVisitorteam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Substitutions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Substitutions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Substitutions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Substitutions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalteamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.Substitution.serializeBinaryToWriter
    );
  }
  f = message.getVisitorteamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.model.Substitution.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Substitution localTeam = 1;
 * @return {!Array<!proto.model.Substitution>}
 */
proto.model.Substitutions.prototype.getLocalteamList = function() {
  return /** @type{!Array<!proto.model.Substitution>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.Substitution, 1));
};


/** @param {!Array<!proto.model.Substitution>} value */
proto.model.Substitutions.prototype.setLocalteamList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.Substitution=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Substitution}
 */
proto.model.Substitutions.prototype.addLocalteam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.Substitution, opt_index);
};


proto.model.Substitutions.prototype.clearLocalteamList = function() {
  this.setLocalteamList([]);
};


/**
 * repeated Substitution visitorTeam = 2;
 * @return {!Array<!proto.model.Substitution>}
 */
proto.model.Substitutions.prototype.getVisitorteamList = function() {
  return /** @type{!Array<!proto.model.Substitution>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.Substitution, 2));
};


/** @param {!Array<!proto.model.Substitution>} value */
proto.model.Substitutions.prototype.setVisitorteamList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.model.Substitution=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Substitution}
 */
proto.model.Substitutions.prototype.addVisitorteam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.model.Substitution, opt_index);
};


proto.model.Substitutions.prototype.clearVisitorteamList = function() {
  this.setVisitorteamList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Substitution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.Substitution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.Substitution.displayName = 'proto.model.Substitution';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Substitution.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Substitution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Substitution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Substitution.toObject = function(includeInstance, msg) {
  var f, obj = {
    offname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    onname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    offid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    onid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    minute: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tableid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Substitution}
 */
proto.model.Substitution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Substitution;
  return proto.model.Substitution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Substitution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Substitution}
 */
proto.model.Substitution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinute(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Substitution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Substitution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Substitution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Substitution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOnname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOffid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOnid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMinute();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTableid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string offName = 1;
 * @return {string}
 */
proto.model.Substitution.prototype.getOffname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.Substitution.prototype.setOffname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string onName = 2;
 * @return {string}
 */
proto.model.Substitution.prototype.getOnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.Substitution.prototype.setOnname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string offId = 3;
 * @return {string}
 */
proto.model.Substitution.prototype.getOffid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.Substitution.prototype.setOffid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string onId = 4;
 * @return {string}
 */
proto.model.Substitution.prototype.getOnid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.Substitution.prototype.setOnid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string minute = 5;
 * @return {string}
 */
proto.model.Substitution.prototype.getMinute = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.model.Substitution.prototype.setMinute = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string tableId = 6;
 * @return {string}
 */
proto.model.Substitution.prototype.getTableid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.model.Substitution.prototype.setTableid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Comment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.Comment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.Comment.displayName = 'proto.model.Comment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Comment.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Comment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Comment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Comment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    important: jspb.Message.getFieldWithDefault(msg, 2, ""),
    goal: jspb.Message.getFieldWithDefault(msg, 3, ""),
    minute: jspb.Message.getFieldWithDefault(msg, 4, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Comment}
 */
proto.model.Comment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Comment;
  return proto.model.Comment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Comment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Comment}
 */
proto.model.Comment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImportant(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoal(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinute(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Comment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Comment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Comment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Comment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImportant();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGoal();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMinute();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.model.Comment.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.Comment.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string important = 2;
 * @return {string}
 */
proto.model.Comment.prototype.getImportant = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.Comment.prototype.setImportant = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string goal = 3;
 * @return {string}
 */
proto.model.Comment.prototype.getGoal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.Comment.prototype.setGoal = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string minute = 4;
 * @return {string}
 */
proto.model.Comment.prototype.getMinute = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.Comment.prototype.setMinute = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string comment = 5;
 * @return {string}
 */
proto.model.Comment.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.model.Comment.prototype.setComment = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.MatchStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.MatchStats.repeatedFields_, null);
};
goog.inherits(proto.model.MatchStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.MatchStats.displayName = 'proto.model.MatchStats';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.MatchStats.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.MatchStats.prototype.toObject = function(opt_includeInstance) {
  return proto.model.MatchStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.MatchStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MatchStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    localteamList: jspb.Message.toObjectList(msg.getLocalteamList(),
    proto.model.TeamStats.toObject, includeInstance),
    visitorteamList: jspb.Message.toObjectList(msg.getVisitorteamList(),
    proto.model.TeamStats.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.MatchStats}
 */
proto.model.MatchStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.MatchStats;
  return proto.model.MatchStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.MatchStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.MatchStats}
 */
proto.model.MatchStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.TeamStats;
      reader.readMessage(value,proto.model.TeamStats.deserializeBinaryFromReader);
      msg.addLocalteam(value);
      break;
    case 2:
      var value = new proto.model.TeamStats;
      reader.readMessage(value,proto.model.TeamStats.deserializeBinaryFromReader);
      msg.addVisitorteam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.MatchStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.MatchStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.MatchStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MatchStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalteamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.TeamStats.serializeBinaryToWriter
    );
  }
  f = message.getVisitorteamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.model.TeamStats.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TeamStats localTeam = 1;
 * @return {!Array<!proto.model.TeamStats>}
 */
proto.model.MatchStats.prototype.getLocalteamList = function() {
  return /** @type{!Array<!proto.model.TeamStats>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.TeamStats, 1));
};


/** @param {!Array<!proto.model.TeamStats>} value */
proto.model.MatchStats.prototype.setLocalteamList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.TeamStats=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.TeamStats}
 */
proto.model.MatchStats.prototype.addLocalteam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.TeamStats, opt_index);
};


proto.model.MatchStats.prototype.clearLocalteamList = function() {
  this.setLocalteamList([]);
};


/**
 * repeated TeamStats visitorTeam = 2;
 * @return {!Array<!proto.model.TeamStats>}
 */
proto.model.MatchStats.prototype.getVisitorteamList = function() {
  return /** @type{!Array<!proto.model.TeamStats>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.TeamStats, 2));
};


/** @param {!Array<!proto.model.TeamStats>} value */
proto.model.MatchStats.prototype.setVisitorteamList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.model.TeamStats=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.TeamStats}
 */
proto.model.MatchStats.prototype.addVisitorteam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.model.TeamStats, opt_index);
};


proto.model.MatchStats.prototype.clearVisitorteamList = function() {
  this.setVisitorteamList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.TeamStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.TeamStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.TeamStats.displayName = 'proto.model.TeamStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.TeamStats.prototype.toObject = function(opt_includeInstance) {
  return proto.model.TeamStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.TeamStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.TeamStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    shotstotal: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shotsongoal: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fouls: jspb.Message.getFieldWithDefault(msg, 3, ""),
    corners: jspb.Message.getFieldWithDefault(msg, 4, ""),
    offsides: jspb.Message.getFieldWithDefault(msg, 5, ""),
    possessiontime: jspb.Message.getFieldWithDefault(msg, 6, ""),
    yellowcards: jspb.Message.getFieldWithDefault(msg, 7, ""),
    redcards: jspb.Message.getFieldWithDefault(msg, 8, ""),
    saves: jspb.Message.getFieldWithDefault(msg, 9, ""),
    tableid: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.TeamStats}
 */
proto.model.TeamStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.TeamStats;
  return proto.model.TeamStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.TeamStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.TeamStats}
 */
proto.model.TeamStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShotstotal(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShotsongoal(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFouls(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorners(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffsides(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPossessiontime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setYellowcards(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedcards(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSaves(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.TeamStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.TeamStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.TeamStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.TeamStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShotstotal();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShotsongoal();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFouls();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCorners();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOffsides();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPossessiontime();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getYellowcards();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRedcards();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSaves();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTableid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string shotsTotal = 1;
 * @return {string}
 */
proto.model.TeamStats.prototype.getShotstotal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.TeamStats.prototype.setShotstotal = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string shotsOnGoal = 2;
 * @return {string}
 */
proto.model.TeamStats.prototype.getShotsongoal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.TeamStats.prototype.setShotsongoal = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string fouls = 3;
 * @return {string}
 */
proto.model.TeamStats.prototype.getFouls = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.TeamStats.prototype.setFouls = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string corners = 4;
 * @return {string}
 */
proto.model.TeamStats.prototype.getCorners = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.TeamStats.prototype.setCorners = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string offsides = 5;
 * @return {string}
 */
proto.model.TeamStats.prototype.getOffsides = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.model.TeamStats.prototype.setOffsides = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string possessionTime = 6;
 * @return {string}
 */
proto.model.TeamStats.prototype.getPossessiontime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.model.TeamStats.prototype.setPossessiontime = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string yellowCards = 7;
 * @return {string}
 */
proto.model.TeamStats.prototype.getYellowcards = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.model.TeamStats.prototype.setYellowcards = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string redCards = 8;
 * @return {string}
 */
proto.model.TeamStats.prototype.getRedcards = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.model.TeamStats.prototype.setRedcards = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string saves = 9;
 * @return {string}
 */
proto.model.TeamStats.prototype.getSaves = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.model.TeamStats.prototype.setSaves = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string tableId = 10;
 * @return {string}
 */
proto.model.TeamStats.prototype.getTableid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.model.TeamStats.prototype.setTableid = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.PlayerStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.PlayerStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.PlayerStats.displayName = 'proto.model.PlayerStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.PlayerStats.prototype.toObject = function(opt_includeInstance) {
  return proto.model.PlayerStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.PlayerStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.PlayerStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    localteam: (f = msg.getLocalteam()) && proto.model.Players.toObject(includeInstance, f),
    visitorteam: (f = msg.getVisitorteam()) && proto.model.Players.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.PlayerStats}
 */
proto.model.PlayerStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.PlayerStats;
  return proto.model.PlayerStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.PlayerStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.PlayerStats}
 */
proto.model.PlayerStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.Players;
      reader.readMessage(value,proto.model.Players.deserializeBinaryFromReader);
      msg.setLocalteam(value);
      break;
    case 2:
      var value = new proto.model.Players;
      reader.readMessage(value,proto.model.Players.deserializeBinaryFromReader);
      msg.setVisitorteam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.PlayerStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.PlayerStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.PlayerStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.PlayerStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalteam();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.Players.serializeBinaryToWriter
    );
  }
  f = message.getVisitorteam();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.model.Players.serializeBinaryToWriter
    );
  }
};


/**
 * optional Players localTeam = 1;
 * @return {?proto.model.Players}
 */
proto.model.PlayerStats.prototype.getLocalteam = function() {
  return /** @type{?proto.model.Players} */ (
    jspb.Message.getWrapperField(this, proto.model.Players, 1));
};


/** @param {?proto.model.Players|undefined} value */
proto.model.PlayerStats.prototype.setLocalteam = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.model.PlayerStats.prototype.clearLocalteam = function() {
  this.setLocalteam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.PlayerStats.prototype.hasLocalteam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Players visitorTeam = 2;
 * @return {?proto.model.Players}
 */
proto.model.PlayerStats.prototype.getVisitorteam = function() {
  return /** @type{?proto.model.Players} */ (
    jspb.Message.getWrapperField(this, proto.model.Players, 2));
};


/** @param {?proto.model.Players|undefined} value */
proto.model.PlayerStats.prototype.setVisitorteam = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.model.PlayerStats.prototype.clearVisitorteam = function() {
  this.setVisitorteam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.model.PlayerStats.prototype.hasVisitorteam = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Players = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.Players.repeatedFields_, null);
};
goog.inherits(proto.model.Players, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.Players.displayName = 'proto.model.Players';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.Players.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Players.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Players.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Players} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Players.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerList: jspb.Message.toObjectList(msg.getPlayerList(),
    proto.model.Player.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Players}
 */
proto.model.Players.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Players;
  return proto.model.Players.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Players} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Players}
 */
proto.model.Players.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.Player;
      reader.readMessage(value,proto.model.Player.deserializeBinaryFromReader);
      msg.addPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Players.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Players.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Players} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Players.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.Player.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Player player = 1;
 * @return {!Array<!proto.model.Player>}
 */
proto.model.Players.prototype.getPlayerList = function() {
  return /** @type{!Array<!proto.model.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.Player, 1));
};


/** @param {!Array<!proto.model.Player>} value */
proto.model.Players.prototype.setPlayerList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Player}
 */
proto.model.Players.prototype.addPlayer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.Player, opt_index);
};


proto.model.Players.prototype.clearPlayerList = function() {
  this.setPlayerList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.Player.displayName = 'proto.model.Player';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    num: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pos: jspb.Message.getFieldWithDefault(msg, 4, ""),
    posx: jspb.Message.getFieldWithDefault(msg, 5, ""),
    posy: jspb.Message.getFieldWithDefault(msg, 6, ""),
    shotstotal: jspb.Message.getFieldWithDefault(msg, 7, ""),
    shotsongoal: jspb.Message.getFieldWithDefault(msg, 8, ""),
    goals: jspb.Message.getFieldWithDefault(msg, 9, ""),
    assists: jspb.Message.getFieldWithDefault(msg, 10, ""),
    offsides: jspb.Message.getFieldWithDefault(msg, 11, ""),
    foulsdrawn: jspb.Message.getFieldWithDefault(msg, 12, ""),
    foulscommitted: jspb.Message.getFieldWithDefault(msg, 13, ""),
    saves: jspb.Message.getFieldWithDefault(msg, 14, ""),
    yellowcards: jspb.Message.getFieldWithDefault(msg, 15, ""),
    redcards: jspb.Message.getFieldWithDefault(msg, 16, ""),
    penscore: jspb.Message.getFieldWithDefault(msg, 17, ""),
    penmiss: jspb.Message.getFieldWithDefault(msg, 18, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Player}
 */
proto.model.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Player;
  return proto.model.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Player}
 */
proto.model.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNum(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPos(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosx(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosy(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setShotstotal(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setShotsongoal(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoals(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssists(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffsides(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setFoulsdrawn(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setFoulscommitted(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setSaves(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setYellowcards(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedcards(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setPenscore(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setPenmiss(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNum();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPos();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPosx();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPosy();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getShotstotal();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getShotsongoal();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getGoals();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAssists();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getOffsides();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getFoulsdrawn();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getFoulscommitted();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getSaves();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getYellowcards();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getRedcards();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getPenscore();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getPenmiss();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.model.Player.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string num = 2;
 * @return {string}
 */
proto.model.Player.prototype.getNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setNum = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.model.Player.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string pos = 4;
 * @return {string}
 */
proto.model.Player.prototype.getPos = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setPos = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string posX = 5;
 * @return {string}
 */
proto.model.Player.prototype.getPosx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setPosx = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string posY = 6;
 * @return {string}
 */
proto.model.Player.prototype.getPosy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setPosy = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string shotsTotal = 7;
 * @return {string}
 */
proto.model.Player.prototype.getShotstotal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setShotstotal = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string shotsOnGoal = 8;
 * @return {string}
 */
proto.model.Player.prototype.getShotsongoal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setShotsongoal = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string goals = 9;
 * @return {string}
 */
proto.model.Player.prototype.getGoals = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setGoals = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string assists = 10;
 * @return {string}
 */
proto.model.Player.prototype.getAssists = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setAssists = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string offsides = 11;
 * @return {string}
 */
proto.model.Player.prototype.getOffsides = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setOffsides = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string foulsDrawn = 12;
 * @return {string}
 */
proto.model.Player.prototype.getFoulsdrawn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setFoulsdrawn = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string foulsCommitted = 13;
 * @return {string}
 */
proto.model.Player.prototype.getFoulscommitted = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setFoulscommitted = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string saves = 14;
 * @return {string}
 */
proto.model.Player.prototype.getSaves = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setSaves = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string yellowCards = 15;
 * @return {string}
 */
proto.model.Player.prototype.getYellowcards = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setYellowcards = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string redCards = 16;
 * @return {string}
 */
proto.model.Player.prototype.getRedcards = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setRedcards = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string penScore = 17;
 * @return {string}
 */
proto.model.Player.prototype.getPenscore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setPenscore = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string penMiss = 18;
 * @return {string}
 */
proto.model.Player.prototype.getPenmiss = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.model.Player.prototype.setPenmiss = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


goog.object.extend(exports, proto.model);
